# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'clicker.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from threading import Thread
import time
#import datetime
#import pyautogui as pg
import mouse
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QTimer
from PyQt5.QtCore import QThread

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_text = QtWidgets.QLabel(self.centralwidget)
        self.label_text.setGeometry(QtCore.QRect(0, 0, 375, 100))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_text.setFont(font)
        self.label_text.setStyleSheet("background-color: rgb(33, 33, 33);\n"
        "color: rgb(204, 204, 204);")
        self.label_text.setObjectName("label_text")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(250, 100, 125, 100))
        self.pushButton_9.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(125, 100, 125, 100))
        self.pushButton_8.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(0, 100, 125, 100))
        self.pushButton_7.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(250, 200, 125, 100))
        self.pushButton_6.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(125, 200, 125, 100))
        self.pushButton_5.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(0, 200, 125, 100))
        self.pushButton_4.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(250, 300, 125, 100))
        self.pushButton_3.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(125, 300, 125, 100))
        self.pushButton_2.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(0, 300, 125, 100))
        self.pushButton_1.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_0 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_0.setGeometry(QtCore.QRect(125, 400, 125, 100))
        self.pushButton_0.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.pushButton_0.setObjectName("pushButton_0")
        self.pushButton_Delete = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Delete.setGeometry(QtCore.QRect(0, 400, 125, 100))
        self.pushButton_Delete.setStyleSheet("background-color: rgb(255, 183, 39);")
        self.pushButton_Delete.setObjectName("pushButton_Delete")
        self.pushButton_Enter = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Enter.setGeometry(QtCore.QRect(250, 400, 125, 100))
        self.pushButton_Enter.setStyleSheet("background-color: rgb(255, 183, 39);")
        self.pushButton_Enter.setObjectName("pushButton_Enter")
        self.pushButton_equal = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_equal.setGeometry(QtCore.QRect(375, 400, 125, 100))
        self.pushButton_equal.setStyleSheet("background-color: rgb(255, 236, 90);")
        self.pushButton_equal.setObjectName("pushButton_equal")
        self.pushButton_plus = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_plus.setGeometry(QtCore.QRect(375, 100, 125, 100))
        self.pushButton_plus.setStyleSheet("background-color: rgb(255, 236, 90);")
        self.pushButton_plus.setObjectName("pushButton_plus")
        self.pushButton_minus = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_minus.setGeometry(QtCore.QRect(375, 200, 125, 100))
        self.pushButton_minus.setStyleSheet("background-color: rgb(255, 236, 90);")
        self.pushButton_minus.setObjectName("pushButton_minus")
        self.pushButton_multip = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_multip.setGeometry(QtCore.QRect(375, 300, 125, 100))
        self.pushButton_multip.setStyleSheet("background-color: rgb(255, 236, 90);")
        self.pushButton_multip.setObjectName("pushButton_multip")
        self.label_time = QtWidgets.QLabel(self.centralwidget)
        self.label_time.setGeometry(QtCore.QRect(375, 0, 125, 50))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.label_time.setFont(font)
        self.label_time.setStyleSheet("background-color: rgb(33, 33, 33);\n"
        "color: rgb(204, 204, 204);")
        self.label_time.setObjectName("label_time")
        self.label_click = QtWidgets.QLabel(self.centralwidget)
        self.label_click.setGeometry(QtCore.QRect(375, 50, 125, 50))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.label_click.setFont(font)
        self.label_click.setStyleSheet("background-color: rgb(33, 33, 33);\n"
        "color: rgb(204, 204, 204);")
        self.label_click.setObjectName("label_click")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_func()
        '''calc variables'''
        self.is_equal = False
        self.calc_result = 1

        '''clicker variables'''
        #self.time_to_point = 0
        self.x_coord = -1
        self.y_coord = -1

        ## -1 -ask first question
        ##  0 -enter the position
        ##  1 -enter the number of clicks
        ##  2 -enter the time interval
        ##  3 -start click procces
        ##  4 - ...
        self.condition = -1

        self.STARTER=True
        ##  Restart=new(coord + clicks number + time interval);
        ##  Continue=new(clicks number + time interval)
        self.START_Type='Continue'

        self.Number_clicks=0
        self.Current_number = 10

        self.Timer_interval=0
        self.Current_time = 25

        self.answer=0

        '''Qtimer'''
        self.timer = QTimer()
        self.timer.timeout.connect(self.Set_time)
        self.intro_timer = QTimer()
        self.intro_timer.timeout.connect(self.Intro)
        #self.timer.timeout.connect(lambda: self.Set_time())
        #self.timer.start(1000)

        #self.clicker = QTimer()
        #self.clicker.timeout.connect(lambda: self.Set_click())
        #self.clicker.start(4000)

        #self.timer.startTimer()
        #self.timer.start()
        #self.timer.stop()
        #self.timer.killTimer()
        #self.timer.remainingTime()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.label_text.setText(_translate("MainWindow", "Home:"))
        self.pushButton_9.setText(_translate("MainWindow", "9"))
        self.pushButton_8.setText(_translate("MainWindow", "8"))
        self.pushButton_7.setText(_translate("MainWindow", "7"))
        self.pushButton_6.setText(_translate("MainWindow", "6"))
        self.pushButton_5.setText(_translate("MainWindow", "5"))
        self.pushButton_4.setText(_translate("MainWindow", "4"))
        self.pushButton_3.setText(_translate("MainWindow", "3"))
        self.pushButton_2.setText(_translate("MainWindow", "2"))
        self.pushButton_1.setText(_translate("MainWindow", "1"))
        self.pushButton_0.setText(_translate("MainWindow", "0"))
        self.pushButton_Delete.setText(_translate("MainWindow", "DEL"))
        self.pushButton_Enter.setText(_translate("MainWindow", "Enter"))
        self.pushButton_equal.setText(_translate("MainWindow", "="))
        self.pushButton_plus.setText(_translate("MainWindow", "+"))
        self.pushButton_minus.setText(_translate("MainWindow", "-"))
        self.pushButton_multip.setText(_translate("MainWindow", "*"))
        self.label_time.setText(_translate("MainWindow", "time"))
        self.label_click.setText(_translate("MainWindow", "clicks"))

    def add_func(self):
        self.pushButton_0.clicked.connect(lambda: self.write_number(self.pushButton_0.text()))
        self.pushButton_1.clicked.connect(lambda: self.write_number(self.pushButton_1.text()))
        self.pushButton_2.clicked.connect(lambda: self.write_number(self.pushButton_2.text()))
        self.pushButton_3.clicked.connect(lambda: self.write_number(self.pushButton_3.text()))
        self.pushButton_4.clicked.connect(lambda: self.write_number(self.pushButton_4.text()))
        self.pushButton_5.clicked.connect(lambda: self.write_number(self.pushButton_5.text()))
        self.pushButton_6.clicked.connect(lambda: self.write_number(self.pushButton_6.text()))
        self.pushButton_7.clicked.connect(lambda: self.write_number(self.pushButton_7.text()))
        self.pushButton_8.clicked.connect(lambda: self.write_number(self.pushButton_8.text()))
        self.pushButton_9.clicked.connect(lambda: self.write_number(self.pushButton_9.text()))

        self.pushButton_plus.clicked.connect(lambda: self.write_number(self.pushButton_plus.text()))
        self.pushButton_minus.clicked.connect(lambda: self.write_number(self.pushButton_minus.text()))
        self.pushButton_multip.clicked.connect(lambda: self.write_number(self.pushButton_multip.text()))

        self.pushButton_equal.clicked.connect(self.results)
        self.pushButton_Delete.clicked.connect(self.DELETE)
        self.pushButton_Enter.clicked.connect(self.Start)

    def write_number(self, number):
        #print(number)
        if self.label_text.text() == "Home:" or self.is_equal == True:
            #print(self.label_text.text())
            self.label_text.setText(number)
            self.is_equal = False
        else:
            print(self.label_text.text())
            self.label_text.setText(self.label_text.text() + number)

    def results(self):
        #res = eval(self.label_text.text())
        #print(res
        self.calc_result = eval(self.label_text.text())
        self.label_text.setText("Result:" + str(eval(self.label_text.text())))#+str(res)
        self.is_equal = True

    def DELETE(self):
        self.label_text.setText("0")  # +str(res)
        self.is_equal = True
        print('done')

    def Start(self):

        if self.condition == -1:
            #print('we are at -1')

            #self.intro_timer.timeout.connect(self.Intro)
            self.intro_timer.start(500)
            t1 = Thread(target=self.Thread_FIND_posintion, args=(1.5,))
            t1.start()

        elif self.condition == 0:
            #self.FIND_posintion()
            #print('x: '+str(self.x_coord)+'\ty: '+str(self.y_coord))

            self.condition = 1
            self.label_text.setText("Put a Number of 1-clicks: ")
            self.is_equal = True

        elif self.condition == 1:
            self.results()
            self.Number_clicks = self.calc_result
            self.Current_number = self.calc_result
            self.label_click.setText(str(self.Number_clicks))

            self.condition = 2
            self.label_text.setText("Put a time-intervals between clicks: ")
            self.is_equal = True

        elif self.condition == 2:
            self.results()
            self.Timer_interval = self.calc_result
            self.Current_time = self.calc_result

            self.label_time.setText(str(self.Timer_interval))

            #self.condition = 0
            #self.label_text.setText("Put a time-intervals between clicks: ")
            #self.is_equal = True

            self.STARTER = True
            self.START_Type = 'Continue'

            #self.label_text.setText("Press Enter to start the procces: ")
            self.condition = 3

            self.pushButton_Enter.click()

        elif self.condition == 3:
            print('timer time')
            print(self.Number_clicks, self.Current_number)

            if self.Number_clicks != 0 and self.Current_number != 0:
                #self.timer.timeout.connect(self.Set_time)
                self.timer.start(1000)# 1000 = 1 sec

        elif self.condition == 4:
            self.results()
            print("ho-ho-ho: ", self.calc_result, self.condition)

            if self.calc_result == 1:
                print('Restart')
                self.condition = -1
                self.pushButton_Enter.click()
            elif self.calc_result == 2:
                print('Continue')
                self.condition = 0
                self.pushButton_Enter.click()
            else:#if self.calc_result != 1 and self.calc_result != 2:
                sys.exit(app.exec_())
                self.condition = -1
                print("other: ", self.calc_result, self.condition)
                self.pushButton_Enter.click()


    def Intro(self):
        print('intro')
        if self.condition == -1:
            self.condition = 0
            self.label_text.setText("Choose the position by \ncursor and right-click on it:")
            self.is_equal = True
            print(self.intro_timer.isActive())
            print(self.intro_timer.timerId())
        else:
            print(self.intro_timer.timerId())
            self.intro_timer.stop()
            self.intro_timer.killTimer(self.intro_timer.timerId())
            print(self.intro_timer.isActive())
            #self.FIND_posintion()
            #self.pushButton_Enter.click()

    '''
    def FIND_posintion(self):
        print("Choose the position you need by cursor and right-click on it:\n")
        while True:
            if mouse.is_pressed(button='right'):  # left
                #print('Gotcha')
                #x, y = self.choose_posintion()
                #return x, y
                x, y = mouse.get_position()
                self.x_coord = x
                self.y_coord = y
                print('x: ' + str(self.x_coord) + '\ty: ' + str(self.y_coord))
                break
    '''

    def Thread_FIND_posintion(self, slumber):
        print("Choose the position you need by cursor and right-click on it:\n")
        time.sleep(slumber)
        while True:
            if mouse.is_pressed(button='right'):  # left
                #print('Gotcha')
                #x, y = self.choose_posintion()
                #return x, y
                x, y = mouse.get_position()
                self.x_coord = x
                self.y_coord = y
                print('x: ' + str(self.x_coord) + '\ty: ' + str(self.y_coord))
                break
        print('break the cycle and ready to next step')
        self.pushButton_Enter.click()

    def Set_time(self):
        if self.condition == 4:
            self.timer.stop()
            self.timer.killTimer(self.timer.timerId())

            self.label_text.setText("Restart/Continue or end the Session?\nEnter - 1/2/else: ")
            self.is_equal = True
            #self.pushButton_Enter.click()
        else:
            print('Set_time', self.Current_time)
            self.label_time.setText(str(self.Current_time) + '/' + str(self.Timer_interval))
            self.Current_time -= 1

            if self.Current_time == -1:

                mouse.move(self.x_coord, self.y_coord)
                mouse.click(button='left')

                self.Current_number -= 1
                self.label_click.setText(str(self.Current_number) + '/' + str(self.Number_clicks))
                #print('Current clicks: ', self.Current_number)

                if self.Current_number == 0:
                    #print('the end')
                    print(self.Current_number, self.Current_time)
                    #self.timer.stop()
                    ''' add changes to state'''

                    self.condition = 4
                    #self.label_text.setText("Restart/Continue or end the Session?\nEnter - 1/2/else: ")
                    return

                self.Current_time = self.Timer_interval

            #print('Current_time:', self.Current_time)
            #print('Timer_interval:', self.Timer_interval)

'''
class Position_Thread(QThread):
    x=0
    y=0
    def __init__(self):
        QtCore.QThread.__init__(self)

    def run(self):
        while True:
            print('thread ee')
            if mouse.is_pressed(button='right'):  # left
                #print('Gotcha')
                #x, y = self.choose_posintion()
                #return x, y
                x, y = mouse.get_position()
                self.x = x
                self.y = y
                print('x: ' + str(self.x_coord) + '\ty: ' + str(self.y_coord))
                Position_Thread.finished()
'''

if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
